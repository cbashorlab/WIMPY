if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
install.packages("circlize")
library(circlize)
# Create an adjacency matrix:
# a list of connections between 20 origin nodes, and 5 destination nodes:
numbers <- sample(c(1:1000), 100, replace = T)
data <- matrix( numbers, ncol=5)
rownames(data) <- paste0("orig-", seq(1,20))
colnames(data) <- paste0("dest-", seq(1,5))
head(data)
chordDiagram(data, transparency = 0.5)
# Create an adjacency matrix:
# a list of connections between 20 origin nodes, and 5 destination nodes:
origin <- paste0("orig ", sample(c(1:10), 20, replace = T))
destination <- paste0("dest ", sample(c(1:10), 20, replace = T))
data <- data.frame(origin, destination)
data
chordDiagram(adjacencyData, transparency = 0.5)
# Transform input data in a adjacency matrix
adjacencyData <- with(data, table(origin, destination))
head(adjacencyData)
chordDiagram(adjacencyData, transparency = 0.5)
m <- data.frame(order = 1:6,
country = c("Ausralia", "India", "China", "Japan", "Thailand", "Malaysia"),
V3 = c(1, 150000, 90000, 180000, 15000, 10000),
V4 = c(35000, 1, 10000, 12000, 25000, 8000),
V5 = c(10000, 7000, 1, 40000, 5000, 4000),
V6 = c(7000, 8000, 175000, 1, 11000, 18000),
V7 = c(70000, 30000, 22000, 120000, 1, 40000),
V8 = c(60000, 90000, 110000, 14000, 30000, 1),
r = c(255,255,255,153,51,51),
g = c(51, 153, 255, 255, 255, 255),
b = c(51, 51, 51, 51, 51, 153),
stringsAsFactors = FALSE)
m
setwd <- 'C:/Users/kshit/OneDrive/Desktop/'
setwd('C:/Users/kshit/OneDrive/Desktop/')
getwd()
miniMap_out <- read.table('aln.sam')
miniMap_out <- read.table('aln.sam', header = FALSE, sep = '\t')
miniMap_out <- read.table('aln.sam', header = FALSE, sep = '\t')
miniMap_out <- read.table('aln.sam', header = FALSE, sep = '\t', fill = T)
colnames(miniMap_out) <- c('queryName', 'queryLength', 'queryStart', 'queryEnd', 'char', 'targetName', 'targetLength', 'targetStart', 'targetEnd', 'matchingBases', 'matchLength', 'matchQuality')
for(e in 1:nrow(miniMap_out)){
polygon(x = c(miniMap_out$targetStart[e], miniMap_out$targetEnd[e], miniMap_out$queryEnd[e], miniMap_out$queryStart[e]),
y = c(8,8,2,2),
col = adjustcolor('black', alpha.f = 0.1), border = FALSE)
}
plot.new()
for(e in 1:nrow(miniMap_out)){
polygon(x = c(miniMap_out$targetStart[e], miniMap_out$targetEnd[e], miniMap_out$queryEnd[e], miniMap_out$queryStart[e]),
y = c(8,8,2,2),
col = adjustcolor('black', alpha.f = 0.1), border = FALSE)
}
miniMap_out$targetStart
plot(miniMap_out$targetStart)
